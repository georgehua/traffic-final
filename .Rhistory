shiny::runApp('lecture-15-exercises/exercise-2')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
type <- iris %>%
group_by(species) %>%
summarse()
class(iris)
type <- iris %>%
group_by(Species) %>%
summarse()
type <- iris %>%
group_by(Species) %>%
summarse(Species)
unique(iris$Species)
shiny::runApp('a8-building-applications')
### Example from plotly ###
df$hover <- with(df, paste(state, '<br>', "Beef", beef, "Dairy", dairy, "<br>",
"Fruits", total.fruits, "Veggies", total.veggies,
"<br>", "Wheat", wheat, "Corn", corn))
# give state boundaries a white border
l <- list(color = toRGB("white"), width = 2)
# specify some map projection/options
g <- list(
scope = 'usa',
projection = list(type = 'albers usa'),
showlakes = TRUE,
lakecolor = toRGB('white')
)
plot_ly(df, z = eval(parse(text = column)), text = hover, locations = code, type = 'choropleth',
locationmode = 'USA-states', color = eval(parse(text = column)), colors = 'Purples',
marker = list(line = l), colorbar = list(title = "Millions USD")) %>%
layout(title = '2011 US Agriculture Exports by State<br>(Hover for breakdown)', geo = g) %>%
shiny::runApp('lecture-15-exercises/exercise-2')
shiny::runApp('lecture-15-exercises/exercise-2')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
colnames(data)
colnames(iris)
""unique(iris$Species)
unique(iris$Species)
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
source("scripts/build_scatter.R")
source("scripts/build_scatter.r")
wd
source("a8-building-applications/scripts/build_scatter.r")
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
install.packages('devtools')
devtools::install_github('rstudio/rsconnect')
library(rsconnect)
rsconnect::deployApp('path/to/your/app')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('lecture-15-exercises/exercise-2')
shiny::runApp('lecture-15-exercises/exercise-2')
shiny::runApp('lecture-15-exercises/exercise-2')
shiny::runApp('a8-building-applications')
shiny::runApp('lecture-15-exercises/exercise-2')
shiny::runApp('lecture-15-exercises/exercise-2')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('lecture-15-exercises/exercise-2')
shiny::runApp('a8-building-applications')
shiny::runApp('lecture-15-exercises/exercise-2')
shiny::runApp('a8-building-applications')
shiny::runApp('lecture-15-exercises/exercise-2')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
shiny::runApp('a8-building-applications')
library(jsonlite)
library(knitr)
library(dplyr)
url <- ("https://maps.googleapis.com/maps/api/directions/json?origin=47.46257,-122.2638&destination=47.76702,-122.1858&key=AIzaSyBnOXP6MmR3QC4iu1BOpnIGR59YRDu2TaQ")
data <- fromJSON(url)
class(data)
View(data)
data$routes
class(data$routes)
position <- data$routes
View(position)
?flatten
position <- flatten(data$routes)
position <- flatten(data$routes$legs)
class(data$routes$legs)
position <- as.data.frame(data$routes$legs)
position <- as.data.frame(data$routes$legs$steps)
class(data$routes$legs$steps)
data$routes$legs$steps
data$routes$legs$end_location
position <- as.data.frame(data$routes$legs)
position <- as.data.frame(data$routes$legs$steps)
position <- as.data.frame(data$routes$legs)
colnames(position)
position <- as.data.frame(data$routes$legs$distance)
position <- data$routes$legs$steps
library(ggplot2)
library(data.table)
install.packages(data.table)
install.packages("data.table")
install.packages("reshape2")
library(reshape2)
install.packages("ggplot2")
install.packages("ggplot2")
library(dplyr)
library(ggplot2)
library(ggplot2)
library(data.table)
library(reshape2)
library(dplyr)
load("suicides.rdata")
all_suicides <- copy(suicides)
suicides <- suicides %>%
group_by(year, state, means) %>%
mutate(deaths = sum(deaths))
# start from the very basics: what is ggplot, alone?
bare <- ggplot(suicides)
# what are plot aesthetics?
aesthetic <- ggplot(suicides, aes(x=year, y=deaths))
# how do you put actual stuff on the plot?
scatter <- ggplot(suicides, aes(x=year, y=deaths)) +
geom_point()
# split "means" out by color
color_by_means <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_point(size=3)
# facet out by state, toggle scales on and off
scatter_by_state <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_point(size=3) +
facet_wrap(~state, scales="free")
# experiment with a different type of plot
line_by_state <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_line(size=3) +
facet_wrap(~state, scales="free")
# experiment with a third type of plot. Also: plotting functions have aesthetics too!
bar_by_state <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_bar(aes(fill=means), stat="identity") +
facet_wrap(~state, scales="free")
##------------------------------------------------------------------
## look at a one state example to explor other dimensions/plot formats
##------------------------------------------------------------------
one_state <- all_suicides[all_suicides$state=="Haryana"] %>%
group_by(year, state, sex, age, means) %>%
mutate(deaths = sum(deaths))
#multiple aes values per plotting function, facet_grid, labels
density_plots <- ggplot(one_state, aes(x=deaths)) +
geom_density(aes(color=means, fill=means), size=1, alpha=0.5) +
facet_grid(age~sex, scales="free") +
labs(title="Distribution of Suicides by Age, Sex, and Means, 2001-2010",
x="Deaths",
y="Density")
one_state <- all_suicides[all_suicides$state=="Haryana"] %>%
group_by(year, state, means) %>%
mutate(deaths = sum(deaths))
#multiple plotting functions per plot (toggle color aes in geom_point)
point_line <- ggplot(one_state, aes(x=year, y=deaths)) +
geom_line(aes(color=means), size=2) +
geom_point(aes(shape=means, color=means),  size=3)
library(ggplot2)
library(data.table)
library(reshape2)
library(dplyr)
load("suicides.rdata")
all_suicides <- copy(suicides)
suicides <- suicides %>%
group_by(year, state, means) %>%
mutate(deaths = sum(deaths))
# start from the very basics: what is ggplot, alone?
bare <- ggplot(suicides)
# what are plot aesthetics?
aesthetic <- ggplot(suicides, aes(x=year, y=deaths))
# how do you put actual stuff on the plot?
scatter <- ggplot(suicides, aes(x=year, y=deaths)) +
geom_point()
# split "means" out by color
color_by_means <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_point(size=3)
# facet out by state, toggle scales on and off
scatter_by_state <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_point(size=3) +
facet_wrap(~state, scales="free")
# experiment with a different type of plot
line_by_state <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_line(size=3) +
facet_wrap(~state, scales="free")
# experiment with a third type of plot. Also: plotting functions have aesthetics too!
bar_by_state <- ggplot(suicides, aes(x=year, y=deaths, color=means)) +
geom_bar(aes(fill=means), stat="identity") +
facet_wrap(~state, scales="free")
##------------------------------------------------------------------
## look at a one state example to explor other dimensions/plot formats
##------------------------------------------------------------------
one_state <- all_suicides[all_suicides$state=="Haryana"] %>%
group_by(year, state, sex, age, means) %>%
mutate(deaths = sum(deaths))
#multiple aes values per plotting function, facet_grid, labels
density_plots <- ggplot(one_state, aes(x=deaths)) +
geom_density(aes(color=means, fill=means), size=1, alpha=0.5) +
facet_grid(age~sex, scales="free") +
labs(title="Distribution of Suicides by Age, Sex, and Means, 2001-2010",
x="Deaths",
y="Density")
one_state <- all_suicides[all_suicides$state=="Haryana"] %>%
group_by(year, state, means) %>%
mutate(deaths = sum(deaths))
#multiple plotting functions per plot (toggle color aes in geom_point)
point_line <- ggplot(one_state, aes(x=year, y=deaths)) +
geom_line(aes(color=means), size=2) +
geom_point(aes(shape=means, color=means),  size=3)
position <- data$routes$legs
position <- as.data.frame(data$routes$legs)
position <- as.data.frame(data$routes$legs$steps)
View(position)
library(jsonlite)
url <- ("https://maps.googleapis.com/maps/api/directions/json?origin=47.46257,-122.2638&destination=47.76702,-122.1858&key=AIzaSyBnOXP6MmR3QC4iu1BOpnIGR59YRDu2TaQ")
data <- fromJSON(url)
position <- as.data.frame(data$routes$legs$steps)
position <- as.data.frame(data$routes$legs)
steps <- position$steps
steps
steps <- as.data.frame(position$steps)
View(steps)
url <- ("https://maps.googleapis.com/maps/api/directions/json?mode=walk&origin=47.46257,-122.2638&destination=47.76702,-122.1858&key=AIzaSyBnOXP6MmR3QC4iu1BOpnIGR59YRDu2TaQ")
data <- fromJSON(url)
position <- as.data.frame(data$routes$legs)
steps <- as.data.frame(position$steps)
library(jsonlite)
url <- ("https://maps.googleapis.com/maps/api/directions/json?travel_mode=walk&origin=47.46257,-122.2638&destination=47.76702,-122.1858&key=AIzaSyBnOXP6MmR3QC4iu1BOpnIGR59YRDu2TaQ")
data <- fromJSON(url)
position <- as.data.frame(data$routes$legs)
steps <- as.data.frame(position$steps)
View(steps)
install.packages("leaflet")
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=47.46257, lat=-122.2638, popup="The birthplace of R")
m  # Print the map
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-122.2638, lat=47.46257, popup="The birthplace of R")
m  # Print the map
colnames(steps)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=steps$end_location.lng, lat=steps$end_location.lat, popup="The birthplace of R")
m  # Print the map
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
states <- readOGR("shp/cb_2013_us_state_20m.shp",
layer = "cb_2013_us_state_20m", verbose = FALSE)
neStates <- subset(states, states$STUSPS %in% c(
"CT","ME","MA","NH","RI","VT","NY","NJ","PA"
))
leaflet(neStates) %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = ~colorQuantile("YlOrRd", states$AWATER)(AWATER)
)
library(rgdal)
install.packages("rgdal")
library(rgdal)
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
states <- readOGR("shp/cb_2013_us_state_20m.shp",
layer = "cb_2013_us_state_20m", verbose = FALSE)
neStates <- subset(states, states$STUSPS %in% c(
"CT","ME","MA","NH","RI","VT","NY","NJ","PA"
))
leaflet(neStates) %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = ~colorQuantile("YlOrRd", states$AWATER)(AWATER)
)
library(jsonlite)
library(leaflet)
library(rgdal)
install.packages("rgadl")
install.packages("rgdal")
library(rgdal)
install.packages("sp")
install.packages("sp")
library(sp)
library(rgdal)
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
states <- readOGR("shp/cb_2013_us_state_20m.shp",
layer = "cb_2013_us_state_20m", verbose = FALSE)
neStates <- subset(states, states$STUSPS %in% c(
"CT","ME","MA","NH","RI","VT","NY","NJ","PA"
))
leaflet(neStates) %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = ~colorQuantile("YlOrRd", states$AWATER)(AWATER)
)
create_name <- function(data) {
data$name <- "NA"
for(i in 0:47) {
for(j in 1:6) {
data[j + 6 * i,'name'] <- i + 1
}
}
}
B_520_70 <- create_name(B_520_70)
B_520_70 <- read.csv("data(new)/Before SR 520 to NE 70th.csv")
getwd()
B_520_70 <- read.csv("/Users/hongtianxuhua/Documents/info498fdata(new)/Before SR 520 to NE 70th.csv")
B_520_70 <- read.csv("/Users/hongtianxuhua/Documents/info498f/data(new)/Before SR 520 to NE 70th.csv")
A_520_70 <- read.csv("After SR 520 to NE 70.csv")
B_520_70 <- read.csv("data(new)/Before SR 520 to NE 70th.csv")
getwd()
B_520_70 <- read.csv("data(new)/Before SR 520 to NE 70th.csv")
setwd("/Users/hongtianxuhua/Documents/info498f")
B_520_70 <- read.csv("data(new)/Before SR 520 to NE 70th.csv")
B_520_70 <- read.csv("Before SR 520 to NE 70th.csv")
setwd("/Users/hongtianxuhua/Documents/info498f/data(new)")
build_map <- function(data_avg, input_slider, dataset) {
data <- eval(parse(text = dataset))
input_slider_value <- data_avg[which(data_avg$name == 1.0 * input_slider),"average"]
input_slider_value <- as.numeric(input_slider_value)
pal <- colorNumeric(
palette = "Red",
domain = input_slider_value
)
m <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%  # Add default OpenStreetMap map tiles
fitBounds(lng1 = min(data$X2), lat1 = max(data$X1), lng2 = max(data$X2), lat2 = min(data$X1)) %>%
addPolylines(
lng=data$X2, lat=data$X1, stroke = TRUE, opacity = 0.3, smoothFactor = 0.5,
color = pal(data_avg), weight = round(input_slider_value/80, digits=0)+10)
return(m)
}
library(dplyr)
setwd("/Users/hongtianxuhua/Documents/info498f/traffic-final")
B_520_70 <- read.csv("data(new)/Before SR 520 to NE 70th.csv")
A_520_70 <- read.csv("data(new)/After SR 520 to NE 70.csv")
# the function that assign every 6 rows(30mins) the same name
# for the sake of group_by() the dataset
create_name <- function(dataset) {
dataset$name
for(i in 0:47) {
for(j in 1:6) {
dataset[j + 6 * i,'name'] <- (i + 1) / 2
}
}
return(dataset)
}
# create the name col for every dataset
B_520_70 <- create_name(B_520_70)
A_520_70 <- create_name(A_520_70)
# group the dataset and calculate the average TTS
cal_index <- function(dataset) {
average <- dataset %>% group_by(name) %>% summarise(average = mean(Avg..TTS))
return(average)
}
B_520_70_average <- cal_index(B_520_70)
library(dplyr)
library(leaflet)
library(sp)
library(jsonlite)
source("script.R")
url_8th_to_SR527 <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.617597,-122.188537&wp.1=47.794967,%20-122.214141&routePathOutput=Points&output=json&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
url_Bell_to_Totemlk <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.615449,-122.188641&wp.1=47.705301,-122.179698&routePathOutput=Points&output=json&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
url_I5_to_SR522 <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.827635,-122.256036&wp.1=47.762606,-122.185533&routePathOutput=Points&output=json&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
url_I5_to_SR527 <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.827635,-122.256036&wp.1=47.794821,-122.214448&routePathOutput=Points&output=json&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
url_NE85th_SR520 <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.679087,-122.184709&wp.1=47.637159,-122.186778&routePathOutput=Points&output=json&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
url_SR520_NE70th <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.639210,-122.186392&wp.1=47.664188,-122.186911&routePathOutput=Points&output=json&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
parseData <- function(url) {
data <- fromJSON(url)
position <- as.data.frame(data$resourceSet$resources)
position <- flatten(position)
return(as.data.frame(position$routePath.line.coordinates))
}
points_8th_to_SR527 <- parseData(url_8th_to_SR527)
points_Bell_to_Totemlk <- parseData(url_Bell_to_Totemlk)
points_I5_to_SR522 <- parseData(url_I5_to_SR522)
points_I5_to_SR527 <- parseData(url_I5_to_SR527)
points_NE85th_SR520 <- parseData(url_NE85th_SR520)
points_SR520_NE70th <- parseData(url_SR520_NE70th)
build_map <- function(data_avg, input_slider, dataset) {
data <- eval(parse(text = dataset))
input_slider_value <- data_avg[which(data_avg$name == 1.0 * input_slider),"average"]
input_slider_value <- as.numeric(input_slider_value)
pal <- colorNumeric(
palette = "Red",
domain = input_slider_value
)
m <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%  # Add default OpenStreetMap map tiles
fitBounds(lng1 = min(data$X2), lat1 = max(data$X1), lng2 = max(data$X2), lat2 = min(data$X1)) %>%
addPolylines(
lng=data$X2, lat=data$X1, stroke = TRUE, opacity = 0.3, smoothFactor = 0.5,
color = pal(data_avg), weight = round(input_slider_value/80, digits=0)+10)
return(m)
}
shinyApp(ui, server)
library(shiny)
library(leaflet)
source("testPlot.R")
# start shiny part
ui <- fluidPage(
leafletOutput("mymap"),
selectInput("corridor", label = h3("Corridor"),
choices = list("points_8th_to_SR527" = "points_8th_to_SR527", "points_Bell_to_Totemlk" = "points_Bell_to_Totemlk",
"points_I5_to_SR522" = "points_I5_to_SR522", "points_I5_to_SR527" = "points_I5_to_SR527",
"points_NE85th_SR520" = "points_NE85th_SR520", "points_SR520_NE70th" = "points_SR520_NE70th"),
selected = "points_8th_to_SR527"),
sliderInput("slider", label = h3("Slider"), min = 1,
max = 24, step=0.5, animate=TRUE, value = 0)
)
server <- function(input, output) {
output$mymap <- renderLeaflet({
mymap <- build_map(B_520_70_average, input$slider, input$corridor)
})
}
shinyApp(ui, server)
build_map <- function(data_avg, input_slider, dataset) {
data <- eval(parse(text = dataset))
input_slider_value <- data_avg[which(data_avg$name == 1.0 * input_slider),"average"]
input_slider_value <- as.numeric(input_slider_value)
pal <- colorNumeric(
palette = "Red",
domain = input_slider_value
)
m <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%  # Add default OpenStreetMap map tiles
fitBounds(lng1 = min(data$X2), lat1 = max(data$X1), lng2 = max(data$X2), lat2 = min(data$X1)) %>%
addPolylines(
lng=data$X2, lat=data$X1, stroke = TRUE, opacity = 0.3, smoothFactor = 0.5,
color = "red", weight = round(input_slider_value/80, digits=0)+10)
return(m)
}
shinyApp(ui, server)
build_map <- function(data_avg, input_slider, dataset) {
data <- eval(parse(text = dataset))
input_slider_value <- data_avg[which(data_avg$name == 1.0 * input_slider),"average"]
input_slider_value <- as.numeric(input_slider_value)
pal <- colorNumeric(
palette = "Red",
domain = input_slider_value
)
m <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%  # Add default OpenStreetMap map tiles
fitBounds(lng1 = min(data$X2), lat1 = max(data$X1), lng2 = max(data$X2), lat2 = min(data$X1)) %>%
addPolylines(
lng=data$X2, lat=data$X1, stroke = TRUE, opacity = 0.3, smoothFactor = 0.5,
color = pal, weight = round(input_slider_value/80, digits=0)+10)
return(m)
}
shinyApp(ui, server)
build_map <- function(data_avg, input_slider, dataset) {
data <- eval(parse(text = dataset))
input_slider_value <- data_avg[which(data_avg$name == 1.0 * input_slider),"average"]
input_slider_value <- as.numeric(input_slider_value)
pal <- colorNumeric(
palette = "Red",
domain = input_slider_value
)
m <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%  # Add default OpenStreetMap map tiles
fitBounds(lng1 = min(data$X2), lat1 = max(data$X1), lng2 = max(data$X2), lat2 = min(data$X1)) %>%
addPolylines(
lng=data$X2, lat=data$X1, stroke = TRUE, opacity = 0.3, smoothFactor = 0.5,
color = pal(input_slider_value), weight = round(input_slider_value/80, digits=0)+10)
return(m)
}
shinyApp(ui, server)
build_map <- function(data_avg, input_slider, dataset) {
data <- eval(parse(text = dataset))
input_slider_value <- data_avg[which(data_avg$name == 1.0 * input_slider),"average"]
input_slider_value <- as.numeric(input_slider_value)
pal <- colorNumeric(
palette = "Red",
domain = input_slider_value
)
m <- leaflet() %>%
addProviderTiles("CartoDB.Positron") %>%  # Add default OpenStreetMap map tiles
fitBounds(lng1 = min(data$X2), lat1 = max(data$X1), lng2 = max(data$X2), lat2 = min(data$X1)) %>%
addPolylines(
lng=data$X2, lat=data$X1, stroke = TRUE, opacity = input_slider_value/1000+0.3, smoothFactor = 0.5,
color = pal(input_slider_value), weight = round(input_slider_value/80, digits=0)+10)
return(m)
}
shinyApp(ui, server)
shinyApp(ui, server)
