addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
library(leaflet)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=174.768, lat=-36.852, popup="The birthplace of R")
m  # Print the map
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=47.46257, lat=-122.2638, popup="The birthplace of R")
m  # Print the map
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-122.2638, lat=47.46257, popup="The birthplace of R")
m  # Print the map
colnames(steps)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=steps$end_location.lng, lat=steps$end_location.lat, popup="The birthplace of R")
m  # Print the map
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
states <- readOGR("shp/cb_2013_us_state_20m.shp",
layer = "cb_2013_us_state_20m", verbose = FALSE)
neStates <- subset(states, states$STUSPS %in% c(
"CT","ME","MA","NH","RI","VT","NY","NJ","PA"
))
leaflet(neStates) %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = ~colorQuantile("YlOrRd", states$AWATER)(AWATER)
)
library(rgdal)
install.packages("rgdal")
library(rgdal)
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
states <- readOGR("shp/cb_2013_us_state_20m.shp",
layer = "cb_2013_us_state_20m", verbose = FALSE)
neStates <- subset(states, states$STUSPS %in% c(
"CT","ME","MA","NH","RI","VT","NY","NJ","PA"
))
leaflet(neStates) %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = ~colorQuantile("YlOrRd", states$AWATER)(AWATER)
)
library(jsonlite)
library(leaflet)
library(rgdal)
install.packages("rgadl")
install.packages("rgdal")
library(rgdal)
install.packages("sp")
install.packages("sp")
library(sp)
library(rgdal)
# From https://www.census.gov/geo/maps-data/data/cbf/cbf_state.html
states <- readOGR("shp/cb_2013_us_state_20m.shp",
layer = "cb_2013_us_state_20m", verbose = FALSE)
neStates <- subset(states, states$STUSPS %in% c(
"CT","ME","MA","NH","RI","VT","NY","NJ","PA"
))
leaflet(neStates) %>%
addPolygons(
stroke = FALSE, fillOpacity = 0.5, smoothFactor = 0.5,
color = ~colorQuantile("YlOrRd", states$AWATER)(AWATER)
)
data <- fromJSON(url)
library(jsonlite)
url <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=seattle&wp.1=portland&routePathOutput=Points&output=json&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
data <- fromJSON(url)
class(data$resourceSet$resources)
class(data$resourceSet$resources$routeLegs)
class(data$resourceSet$resources$routePath)
position <- as.data.frame(data$resourceSet$resources)
colnames(position)
class(data$resourceSet$resources$routePath.coordinates)
position <- flatten(position)
colnames(position)
class(position$routePath.line.type)
position$routePath.line.type
position$routeLegs
coor <- position$routePath.line.coordinates
coor <- as.data.frame(position$routePath.line.coordinates)
View(coor)
url <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.465828,-122.275766&wp.1= 48.004167,-122.437487&routePathOutput=Points&output=json&jsonp=RouteCallback&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
data <- fromJSON(url)
position <- as.data.frame(data$resourceSet$resources)
position <- flatten(position)
coor <- as.data.frame(position$routePath.line.coordinates)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=coor$X1, lat=coor$X2, popup="The birthplace of R")
m  # Print the map
m  # Print the map
library(leaflet)
library(sp)
library(rgdal)
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=coor$X1, lat=coor$X2, popup="The birthplace of R")
m  # Print the map
testline <- cbind(coor$X1,coor$x2)
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
fitBounds(-122.152380, 47.462732, -122.286687, 47.838077) %>%
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "#000000", data = testline)
m  # Print the map
testline <- cbind(coor$X1,coor$x2)
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "#000000", data = testline)
m  # Print the map
library(jsonlite)
library(leaflet)
library(sp)
library(rgdal)
url <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.465828,-122.275766&wp.1= 48.004167,-122.437487&routePathOutput=Points&output=json&jsonp=RouteCallback&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
data <- fromJSON(url)
position <- as.data.frame(data$resourceSet$resources)
position <- flatten(position)
coor <- as.data.frame(position$routePath.line.coordinates)
testline <- cbind(coor$X1,coor$x2)
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "#000000", data = testline)
m  # Print the map
library(jsonlite)
library(leaflet)
library(sp)
library(rgdal)
url <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.465828,-122.275766&wp.1= 48.004167,-122.437487&routePathOutput=Points&output=json&jsonp=RouteCallback&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
data <- fromJSON(url)
position <- as.data.frame(data$resourceSet$resources)
position <- flatten(position)
coor <- as.data.frame(position$routePath.line.coordinates)
url <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.465828,-122.275766&wp.1= 48.004167,-122.437487&routePathOutput=Points&output=json&jsonp=RouteCallback&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
data <- fromJSON(url)
position <- as.data.frame(data$resourceSet$resources)
library(jsonlite)
url <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.465828,-122.275766&wp.1= 48.004167,-122.437487&routePathOutput=Points&output=json&jsonp=RouteCallback&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
data <- fromJSON(url)
data <- fromJSON(url)
library(jsonlite)
library(leaflet)
library(sp)
library(rgdal)
url <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.465828,-122.275766&wp.1= 48.004167,-122.437487&routePathOutput=Points&output=json&jsonp=RouteCallback&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
data <- fromJSON(url)
url <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.465828,-122.275766&wp.1= 48.004167,-122.437487&routePathOutput=Points&output=json&jsonp=RouteCallback&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
data <- fromJSON(url)
url <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.465828,-122.275766&wp.1=48.004167,-122.437487&routePathOutput=Points&output=json&jsonp=RouteCallback&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
data <- fromJSON(url)
url <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.465828,-122.275766&wp.1=48.004167,-122.437487&routePathOutput=Points&output=json&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
data <- fromJSON(url)
position <- as.data.frame(data$resourceSet$resources)
position <- flatten(position)
coor <- as.data.frame(position$routePath.line.coordinates)
testline <- cbind(coor$X1,coor$x2)
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "#000000", data = testline)
m  # Print the map
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "#000000", data = testline)
View(testline)
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "#000000", data = coor)
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "#000000", data = c(coor$X1, coor$X2))
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addmultiPolyline(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "#000000", lng=coor$X1, lat=coor$X2)
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolyline(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "#000000", lng=coor$X1, lat=coor$X2)
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addpolyline(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "#000000", lng=coor$X1, lat=coor$X2)
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "#000000", lng=coor$X1, lat=coor$X2)
m  # Print the map
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "#000000", data=cbind(c(-122.152380, -122.286687),c(47.462732, 47.838077)))
m  # Print the map
?cbin()
?cbind()
testline <- cbind(c(-122.152380, -122.286687),c(47.462732, 47.838077))
View(testline)
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "#000000", data=coor)
m  # Print the map
testline <- cbind(c(-122.152380, -122.286687),c(47.462732, 47.838077))
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "#000000", data=coor)
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "#000000", data=coor)
class(testline)
coor <- position$routePath.line.coordinates
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "#000000", data=coor)
coor <- as.data.frame(position$routePath.line.coordinates)
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "red", data=coor)
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "red", data=c(coor$X1,coor$X2))
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "red", data=cbind(coor$X1,coor$X2))
m  # Print the map
View(coor)
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "red", data=data.matrix(coor))
m  # Print the map
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "red", lng=coor$X1, lat=coor$X2)
m  # Print the map
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
fitBounds(-122.152380, 47.462732, -122.286687, 47.838077) %>%
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "red", lng=coor$X1, lat=coor$X2)
m  # Print the map
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
fitBounds(-122.152380, 47.462732, -122.286687, 47.838077) %>%
addPolylines(
stroke = TRUE, fillOpacity = 0.01, smoothFactor = 0.5,
color = "red", lng=coor$X2, lat=coor$X1)
m  # Print the map
shiny::runApp('traffic-final')
shiny::runApp('traffic-final')
library(shiny)
library(dplyr)
library(plotly)
library(ggplot2)
shiny::runApp('traffic-final')
install.packages("ggplot2")
setwd("/Users/George/info498f/traffic-final/data(new)")
setwd("info498f/traffic-final/data(new)")
setwd("hongtianxuhua/info498f/traffic-final/data(new)")
setwd("/Users/hongtianxuhua/Documents/info498f/traffic-final/data(new)")
shiny::runApp('~/Documents/info498f/traffic-final')
setwd("/Users/hongtianxuhua/Documents/info498f/traffic-final/data(new)")
shiny::runApp('~/Documents/info498f/traffic-final')
shiny::runApp('~/Documents/info498f/traffic-final')
library(dplyr)
library(leaflet)
library(sp)
library(jsonlite)
library(dplyr)
library(leaflet)
library(sp)
library(jsonlite)
url_8th_to_SR527 <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.617597,-122.188537&wp.1=47.794967,%20-122.214141&routePathOutput=Points&output=json&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
url_Bell_to_Totemlk <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.615449,-122.188641&wp.1=47.705301,-122.179698&routePathOutput=Points&output=json&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
url_I5_to_SR522 <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.827635,-122.256036&wp.1=47.762606,-122.185533&routePathOutput=Points&output=json&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
url_I5_to_SR527 <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.827635,-122.256036&wp.1=47.794821,-122.214448&routePathOutput=Points&output=json&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
url_NE85th_SR520 <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.679087,-122.184709&wp.1=47.637159,-122.186778&routePathOutput=Points&output=json&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
url_SR520_NE70th <- ("http://dev.virtualearth.net/REST/v1/Routes?wp.0=47.639210,-122.186392&wp.1=47.664188,-122.186911&routePathOutput=Points&output=json&key=Ai7aXwHGDAQAsbwOL9SOsRZA-OxuCMmTurPSpN6EqzFQsr4qA65wJGuIBNLxX7At")
parseData <- function(url) {
data <- fromJSON(url)
position <- as.data.frame(data$resourceSet$resources)
position <- flatten(position)
return(as.data.frame(position$routePath.line.coordinates))
}
points_8th_to_SR527 <- parseData(url_8th_to_SR527)
points_Bell_to_Totemlk <- parseData(url_Bell_to_Totemlk)
points_I5_to_SR522 <- parseData(url_I5_to_SR522)
points_I5_to_SR527 <- parseData(url_I5_to_SR527)
points_NE85th_SR520 <- parseData(url_NE85th_SR520)
points_SR520_NE70th <- parseData(url_SR520_NE70th)
m <- leaflet() %>%
addProviderTiles("Stamen.Toner") %>%  # Add default OpenStreetMap map tiles
addMarkers(lat=47.617337, lng=-122.188505, popup="Start and End of I-405 Toll Lanes") %>%
addMarkers(lat=47.827635, lng=-122.256036, popup="Start and End of I-405 Toll Lanes") %>%
fitBounds(-122.152380, 47.462732, -122.286687, 47.838077) %>%
addPolylines(
lng=points_I5_to_SR522$X2, lat=points_I5_to_SR522$X1, stroke = TRUE, opacity = 1, smoothFactor = 0.5,
color = "#FF0000", weight = 10, popup="test") %>%
addPolylines(
lng=points_8th_to_SR527$X2, lat=points_8th_to_SR527$X1, stroke = TRUE, fillOpacity = 1, smoothFactor = 0.5,
color = "#0000FF")
m  # Print the map
shiny::runApp('Documents/info498f/traffic-final')
shiny::runApp('Documents/info498f/traffic-final')
View(points_SR520_NE70th)
shiny::runApp('Documents/info498f/traffic-final')
B_520_70 <- read.csv("Before SR 520 to NE 70th.csv")
A_520_70 <- read.csv("After SR 520 to NE 70.csv")
#B_I5_527 <- read.csv("Before I-5 to SR527.csv")
#A_I5_527 <- read.csv("After I-5 to SR 527.csv")
A_I5_522 <- read.csv("After I-5 to 522.csv")
B_I5_522 <- read.csv("Before 1-5 to 522.csv")
A_8_527 <- read.csv("After 8th to SR 527.csv")
B_8_527 <- read.csv("Before 8th to SR 527.csv")
B_520_70 <- read.csv("Before SR 520 to NE 70th.csv")
setwd("/Users/hongtianxuhua/Documents/info498f/traffic-final/data(new)")
B_520_70 <- read.csv("Before SR 520 to NE 70th.csv")
View(B_520_70)
nrow(B_520_70)
B_520_70 <- read.csv("Before SR 520 to NE 70th.csv")
A_520_70 <- read.csv("After SR 520 to NE 70.csv")
#B_I5_527 <- read.csv("Before I-5 to SR527.csv")
#A_I5_527 <- read.csv("After I-5 to SR 527.csv")
A_I5_522 <- read.csv("After I-5 to 522.csv")
B_I5_522 <- read.csv("Before 1-5 to 522.csv")
A_8_527 <- read.csv("After 8th to SR 527.csv")
B_8_527 <- read.csv("Before 8th to SR 527.csv")
View(A_8_527)
nrow(A_8_527)
create_name <- function(data) {
for(i in 0:47) {
for(j in 1:6) {
data$name[j + 6 * i,] = i;
}
}
}
create_name(B_520_70)
create_name <- function(data) {
for(i in 0:47) {
for(j in 1:6) {
data$name[j + 6 * i,] = i
}
}
}
create_name(B_520_70)
create_name <- function(data) {
for(i in 0:47) {
for(j in 1:6) {
data$name
data[j + 6 * i,'name'] = i
}
}
}
create_name(B_520_70)
View(B_520_70)
B_520_70$name
create_name <- function(data) {
for(i in 0:47) {
for(j in 1:6) {
data$name <- 'hey'
data[j + 6 * i,'name'] = i
}
}
}
create_name(B_520_70)
B_520_70$name <- "hey"
B_520_70$name <- "hey"
create_name <- function(data) {
data$name <- 'hey'
for(i in 0:47) {
for(j in 1:6) {
data[j + 6 * i,'name'] = i
}
}
}
create_name(B_520_70)
create_name <- function(data) {
data$name <- 'hey'
for(i in 0:47) {
for(j in 1:6) {
data[j + 6 * i,'name'] <- i
}
}
}
create_name(B_520_70)
data("USPersonalExpenditure")
### Exercise 2 ###
# Load R's "USPersonalExpenditure" dataest using the "data()" function
data("USPersonalExpenditure")
# The variable USPersonalExpenditure is now accessible to you.  Unfortunately, it's not a data.frame
# Test this using the is.data.frame function
is.data.frame(USPersonalExpenditure)
# Luckily, you can simply pass the USPersonalExpenditure variable to the data.frame function
# to convert it a data.farme
# Create a new variable by passing the USPersonalExpenditure to the data.frame function
us_exp <- data.frame(USPersonalExpenditure)
# What are the column names of your dataframe?
colnames(us_exp)
# Why are they so strange?
# What are the row names of your dataframe?
rownames(us_exp)
# Create a column "category" that is equal to your rownames
us_exp$category <- rownames(us_exp)
# Store all "Medical and Health" expenditures in a variable
med_health <- us_exp['Medical and Health',]
# Store only your 1955 data in a varialbe -- what type of variable does it become?
spending_1955 <- us_exp[,'X1955']
# Oh no!  It's a vector!  repeat the same selection above, but:
# include "drop=FALSE" in your square brackets to keep the rownames
spending_1955 <- us_exp[,'X1955', drop=FALSE]
# How much money was spent on personal care in 1940?
care_1940 <- us_exp['Personal Care', 'X1940']
# How much money was spent on Food and Tobacco in 1960
food_1960 <- us_exp['Food and Tobacco', 'X1960']
# What was the highest expenditure category in 1960?
highest_1960 <- us_exp$category[us_exp$X1960 == max(us_exp$X1960)]
# Write a function that takes in a year as a parameter, and
# returns the highest spending category of that year
detect_highest <- function(year) {
return(us_exp$category[us_exp[year] == max(us_exp[year])])
}
# Using your function, determine the highest spending category of each year
highest_1950 <- detect_highest('X1950')
### Bonus ###
# Write a loop to cycle through the years, and store the highest spending category of
# each year in a list
highest <- list()
for(year in seq(1940, 1960, 5)) {
year_index <- paste0('X', year)
highest[year_index] <- detect_highest(year_index)
}
?seq()
?group_by()
group_by(B_520_70, rownames(seq(1, 288, 6)))
group_by(B_520_70, rownames)
create_name <- function(data) {
data$name <- 'hey'
for(i in 0:47) {
for(j in 1:6) {
data[j + 6 * i,'name'] <- i + 1
}
}
}
create_name(B_520_70)
for(i in 0:47) {
for(j in 1:6) {
data[j + 6 * i,'name'] <- i + 1
create_name <- function(data) {
data$name
for(i in 0:47) {
for(j in 1:6) {
data[j + 6 * i,'name'] + i + 1
}
}
}
create_name(B_520_70)
View(B_520_70)
View(B_520_70)
View(B_520_70)
View(B_520_70)
create_name <- function(data) {
data$name
for(i in 0:47) {
for(j in 1:6) {
data[j + 6 * i,'name'] + i + 1
}
}
}
create_name(B_520_70)
View(B_520_70)
B_520_70 <- read.csv("Before SR 520 to NE 70th.csv")
create_name(B_520_70)
View(B_520_70)
View(B_520_70)
